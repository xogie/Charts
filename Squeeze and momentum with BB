import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Fetch TSLA data from Yahoo Finance for the last 90 days
stock_ticker = 'AFRM'
ticker = yf.download(stock_ticker, period='90d', interval='1d')

# Parameter setup
length = 20
mult = 2
lengthKC = 20
multKC = 1.5

# Calculate BB
m_avg = ticker['Close'].rolling(window=length).mean()
m_std = ticker['Close'].rolling(window=length).std(ddof=0)
ticker['upper_BB'] = m_avg + mult * m_std
ticker['lower_BB'] = m_avg - mult * m_std

# Calculate true range
ticker['tr0'] = abs(ticker["High"] - ticker["Low"])
ticker['tr1'] = abs(ticker["High"] - ticker["Close"].shift())
ticker['tr2'] = abs(ticker["Low"] - ticker["Close"].shift())
ticker['tr'] = ticker[['tr0', 'tr1', 'tr2']].max(axis=1)

# Calculate KC
range_ma = ticker['tr'].rolling(window=lengthKC).mean()
ticker['upper_KC'] = m_avg + range_ma * multKC
ticker['lower_KC'] = m_avg - range_ma * multKC

# Calculate bar value
highest = ticker['High'].rolling(window=lengthKC).max()
lowest = ticker['Low'].rolling(window=lengthKC).min()
m1 = (highest + lowest) / 2
ticker['value'] = (ticker['Close'] - (m1 + m_avg) / 2)
fit_y = np.array(range(0, lengthKC))
ticker['value'] = ticker['value'].rolling(window=lengthKC).apply(
    lambda x: np.polyfit(fit_y, x, 1)[0] * (lengthKC - 1) +
    np.polyfit(fit_y, x, 1)[1], raw=True)

# Calculate momentum
ticker['momentum'] = ticker['Close'].diff()

# Check for 'squeeze'
ticker['squeeze_on'] = (ticker['lower_BB'] > ticker['lower_KC']) & (ticker['upper_BB'] < ticker['upper_KC'])
ticker['squeeze_off'] = (ticker['lower_BB'] < ticker['lower_KC']) & (ticker['upper_BB'] > ticker['upper_KC'])

# Plotting the data with adjusted font sizes
plt.figure(figsize=(9, 9))
plt.rc('font', size=10)  # Adjust font size for all elements in the plot

plt.suptitle(f"Stock Ticker: {stock_ticker}", fontsize=14)  # Title for the entire figure

plt.subplot(4, 1, 1)
plt.plot(ticker.index, ticker['Close'], label='Close Price', color='black')
plt.plot(ticker.index, ticker['upper_BB'], label='Upper Bollinger Band', color='blue')
plt.plot(ticker.index, ticker['lower_BB'], label='Lower Bollinger Band', color='red')
plt.fill_between(ticker.index, ticker['lower_BB'], ticker['upper_BB'], color='gray', alpha=0.2)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d'))  # Format x-axis dates as mm/dd
plt.legend()
plt.grid()

plt.subplot(4, 1, 2)
plt.plot(ticker.index, ticker['value'], label='Bar Value', color='green')
plt.axhline(0, color='black', linestyle='--', linewidth=0.8)
plt.fill_between(ticker.index, ticker['value'], color='green', where=ticker['value'] >= 0, alpha=0.3)
plt.fill_between(ticker.index, ticker['value'], color='red', where=ticker['value'] < 0, alpha=0.3)
plt.legend()
plt.grid()

plt.subplot(4, 1, 3)
plt.plot(ticker.index, ticker['momentum'], label='Momentum', color='blue')
plt.fill_between(ticker.index, ticker['momentum'], color='blue', alpha=0.3)
plt.axhline(0, color='black', linestyle='--', linewidth=0.8)
plt.legend()
plt.grid()

plt.subplot(4, 1, 4)
plt.bar(ticker.index, ticker['Volume'], color=np.where(ticker['Close'] > ticker['Open'], 'green', 'red'), label='Volume')
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

